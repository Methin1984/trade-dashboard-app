# app.py - Streamlit Web App Dashboard for Trade Data

import streamlit as st
import pandas as pd
import gspread
import json # Import json library to parse secrets

# --- Google Sheet Configuration ---
# Permissions scope for Google Sheets API
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

# File name for Service Account JSON key (used for local/Colab testing)
# For Streamlit Cloud deployment, this file is handled via Streamlit Secrets
SERVICE_ACCOUNT_FILE = 'service_account_key.json' 

# Google Sheet ID (find this in your Google Sheet's URL)
# Please replace '1iyNH3jgsAVHcuPzLY_kMhvNNrET-LwnKv6snUrP7khs' with your actual Sheet ID
SPREADSHEET_ID = '1iyNH3jgsAVHcuPzLY_kMhvNNrET-LwnKv6snUrP7khs'

# Name of the tab (worksheet) in your Google Sheet that contains the data
# Please replace 'TradeData' with your actual tab name
SHEET_NAME = 'TradeData'

# --- Function to Fetch Data from Google Sheet (with Caching) ---
# @st.cache_data is a Streamlit decorator that caches the data
# This makes the app faster by avoiding repeated data fetches
@st.cache_data(ttl=300) # Cache data for 5 minutes (300 seconds)
def get_data_from_sheet():
    """Fetches all data from the specified Google Sheet using a Service Account."""
    try:
        # Create Credentials from Service Account JSON key
        # For Streamlit Cloud, use gspread.service_account() which automatically
        # looks for secrets in st.secrets["gcp_service_account"]
        if st.secrets.get("gcp_service_account"):
            st.write("Debug: Found 'gcp_service_account' secret.")
            try:
                # gspread.service_account() automatically reads from st.secrets["gcp_service_account"]
                # No need to pass 'credentials=' argument explicitly if the secret is named correctly.
                client = gspread.service_account() 
                st.write("Debug: gspread client created successfully from secrets.")
            except Exception as e_gspread:
                st.error(f"Debug Error: Failed to create gspread client from 'gcp_service_account' secret. Error: {e_gspread}")
                return pd.DataFrame()
        else:
            st.write("Debug: 'gcp_service_account' secret not found, falling back to local file.")
            # Load credentials from a JSON file (for Colab or local testing)
            # This path requires the SERVICE_ACCOUNT_FILE to exist
            from oauth2client.service_account import ServiceAccountCredentials
            creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, SCOPE)
            client = gspread.authorize(creds)
            
        # Open the Spreadsheet and select the Worksheet (tab)
        spreadsheet = client.open_by_id(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)

        # Fetch all data as a list of lists
        data = worksheet.get_all_values()

        # Convert to Pandas DataFrame (first row as header)
        df = pd.DataFrame(data[1:], columns=data[0])

        # Convert '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '‡∏õ‡∏µ ‡∏û.‡∏®.' columns to numeric
        numeric_cols = ['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '‡∏õ‡∏µ ‡∏û.‡∏®.']
        for col in numeric_cols:
            if col in df.columns:
                # errors='coerce' converts non-numeric values to NaN
                # fillna(0) replaces NaN with 0
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

        st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return df
    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö Spreadsheet ID '{SPREADSHEET_ID}' ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï '{SHEET_NAME}'")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SPREADSHEET_ID ‡πÅ‡∏•‡∏∞ SHEET_NAME ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î")
        return pd.DataFrame() # Return an empty DataFrame
    except FileNotFoundError:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Service Account JSON ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ '{SERVICE_ACCOUNT_FILE}'")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå '{SERVICE_ACCOUNT_FILE}' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Colab ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Service Account ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Sheet ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return pd.DataFrame()

# --- Build Streamlit UI ---
st.set_page_config(layout="wide", page_title="‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤") # Set wide layout and page title
st.title('üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®')

# Fetch data
df = get_data_from_sheet()

if not df.empty:
    st.sidebar.header("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    # Analysis options
    analysis_type = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:",
        ("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°", "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤", "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£")
    )

    # Main data filters
    st.sidebar.subheader("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_country = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)')
    selected_hs_code = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)')
    selected_item = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)')
    selected_year = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏µ ‡∏û.‡∏®. (‡πÄ‡∏ä‡πà‡∏ô 2564)')

    # Filter data based on user input
    filtered_df = df.copy()

    if selected_country:
        filtered_df = filtered_df[filtered_df['‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®'].astype(str).str.contains(selected_country.strip(), case=False, na=False)]
    if selected_hs_code:
        filtered_df = filtered_df[filtered_df['‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£'].astype(str).str.contains(selected_hs_code.strip(), case=False, na=False)]
    if selected_item:
        filtered_df = filtered_df[filtered_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].astype(str).str.contains(selected_item.strip(), case=False, na=False)]
    if selected_year:
        filtered_df = filtered_df[filtered_df['‡∏õ‡∏µ ‡∏û.‡∏®.'].astype(str).str.contains(selected_year.strip(), case=False, na=False)]

    st.subheader(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ({len(filtered_df)} ‡πÅ‡∏ñ‡∏ß)")
    st.dataframe(filtered_df, use_container_width=True)

    # --- Display Graphs based on selected analysis type ---
    st.header(analysis_type)

    if filtered_df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà.")
    else:
        # Helper function to create main trade charts (Bar/Line Chart)
        def create_trade_chart(df_data, group_col, title):
            summary_df = df_data.groupby(group_col)[['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å']].sum().reset_index()
            fig = go.Figure(data=[
                go.Bar(name='‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', x=summary_df[group_col], y=summary_df['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤']),
                go.Bar(name='‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', x=summary_df[group_col], y=summary_df['‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'])
            ])
            fig.update_layout(barmode='group', title_text=title)
            return fig

        # Helper function to create Top N charts (Bar Chart)
        def create_top_n_chart(df_data, col_name, value_col, title, top_n=10):
            if col_name not in df_data.columns:
                st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col_name}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")
                return go.Figure()
            summary = df_data.groupby(col_name)[value_col].sum().nlargest(top_n).reset_index()
            fig = px.bar(summary, x=col_name, y=value_col, title=title)
            fig.update_xaxes(title_text=col_name)
            fig.update_yaxes(title_text=value_col)
            return fig
            
        # Helper function to create trade balance charts (Column Chart)
        def create_balance_chart(df_data, group_col, title, top_n=10):
            if group_col not in df_data.columns:
                st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{group_col}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")
                return go.Figure()
            summary_df = df_data.groupby(group_col)[['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å']].sum().reset_index()
            summary_df['‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤'] = summary_df['‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'] - summary_df['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤']
            
            # Sort by absolute balance to show top imbalances (both surplus and deficit)
            summary_df_sorted = summary_df.loc[summary_df['‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤'].abs().nlargest(top_n).index]

            fig = px.bar(summary_df_sorted, x=group_col, y='‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', title=title,
                         color='‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', color_continuous_scale=px.colors.sequential.RdBu)
            fig.update_xaxes(title_text=group_col)
            fig.update_yaxes(title_text='‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤')
            return fig


        if analysis_type == "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°":
            st.subheader("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)

            # Yearly import-export trend graph
            if '‡∏õ‡∏µ ‡∏û.‡∏®.' in filtered_df.columns:
                yearly_summary = filtered_df.groupby('‡∏õ‡∏µ ‡∏û.‡∏®.')[['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å']].sum().reset_index().sort_values(by='‡∏õ‡∏µ ‡∏û.‡∏®.')
                fig = px.line(yearly_summary, x='‡∏õ‡∏µ ‡∏û.‡∏®.', y=['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'], title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤-‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏õ‡∏µ')
                fig.update_xaxes(type='category') # Set X-axis as Category for year
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏õ‡∏µ ‡∏û.‡∏®.' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏õ‡∏µ.")


        elif analysis_type == "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)
            
            st.plotly_chart(create_balance_chart(filtered_df, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'), use_container_width=True)

        elif analysis_type == "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤":
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)
            
            st.plotly_chart(create_balance_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤'), use_container_width=True)

        elif analysis_type == "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£":
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)
            
            st.plotly_chart(create_balance_chart(filtered_df, '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£', '‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£'), use_container_width=True)

else:
    st.info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå Service Account JSON.")
```
