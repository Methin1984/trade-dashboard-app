# %%writefile ‡πÄ‡∏õ‡πá‡∏ô Colab magic command ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ Cell ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå
%%writefile app.py
import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Google Sheet ---
# ‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (Permissions) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets API
SCOPE = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

# ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Service Account JSON key ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Colab
# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Colab Session Storage ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
# ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Deploy ‡∏ö‡∏ô Streamlit Cloud ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ Streamlit Secrets
SERVICE_ACCOUNT_FILE = 'service_account_key.json' # << ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# Sheet ID ‡∏Ç‡∏≠‡∏á Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å URL ‡∏Ç‡∏≠‡∏á Google Sheet)
# ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô '16uC4Rj1EohFXhR1mHEMraB4xPafI2WltO4Q8_DL4Zac' ‡πÄ‡∏õ‡πá‡∏ô Sheet ID ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
SPREADSHEET_ID = '16uC4Rj1EohFXhR1mHEMraB4xPafI2WltO4Q8_DL4Zac'

# ‡∏ä‡∏∑‡πà‡∏≠ Tab ‡∏Ç‡∏≠‡∏á Google Sheet ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏ä‡πà‡∏ô 'TradeData' ‡∏´‡∏£‡∏∑‡∏≠ 'Sheet1')
# ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 'TradeData' ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠ Tab ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏≠‡∏á
SHEET_NAME = 'TradeData'

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet (‡∏û‡∏£‡πâ‡∏≠‡∏° Cache) ---
# @st.cache_data ‡πÄ‡∏õ‡πá‡∏ô decorator ‡∏Ç‡∏≠‡∏á Streamlit ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ Cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏ö‡πà‡∏≠‡∏¢‡πÜ
@st.cache_data(ttl=300) # Cache ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ô‡∏≤‡∏ó‡∏µ (300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
def get_data_from_sheet():
    """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheet ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Service Account."""
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Credentials ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Service Account JSON key
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Streamlit Cloud, ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å st.secrets ‡πÅ‡∏ó‡∏ô
        if st.secrets.get("gspread_service_account_credentials"):
            # ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Streamlit Secrets
            creds_json = st.secrets["gspread_service_account_credentials"]
            creds = ServiceAccountCredentials.from_json(creds_json, SCOPE)
        else:
            # ‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Colab ‡∏´‡∏£‡∏∑‡∏≠ Local Testing)
            creds = ServiceAccountCredentials.from_json_keyfile_name(SERVICE_ACCOUNT_FILE, SCOPE)
            
        # ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå gspread ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Sheets
        client = gspread.authorize(creds)

        # ‡πÄ‡∏õ‡∏¥‡∏î Spreadsheet ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Worksheet (Tab)
        spreadsheet = client.open_by_id(SPREADSHEET_ID)
        worksheet = spreadsheet.worksheet(SHEET_NAME)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏õ‡πá‡∏ô list of lists
        data = worksheet.get_all_values()

        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Pandas DataFrame (‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô Header)
        df = pd.DataFrame(data[1:], columns=data[0])

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '‡∏õ‡∏µ ‡∏û.‡∏®.' ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
        numeric_cols = ['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '‡∏õ‡∏µ ‡∏û.‡∏®.']
        for col in numeric_cols:
            if col in df.columns:
                # errors='coerce' ‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô NaN
                # fillna(0) ‡∏à‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà NaN ‡∏î‡πâ‡∏ß‡∏¢ 0
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

        st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return df
    except gspread.exceptions.SpreadsheetNotFound:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö Spreadsheet ID '{SPREADSHEET_ID}' ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï '{SHEET_NAME}'")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SPREADSHEET_ID ‡πÅ‡∏•‡∏∞ SHEET_NAME ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î")
        return pd.DataFrame() # ‡∏Ñ‡∏∑‡∏ô DataFrame ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
    except FileNotFoundError:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Service Account JSON ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ '{SERVICE_ACCOUNT_FILE}'")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå '{SERVICE_ACCOUNT_FILE}' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Colab ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Service Account ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Sheet ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return pd.DataFrame()

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á Streamlit UI ---
st.set_page_config(layout="wide", page_title="‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤") # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
st.title('üìä ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®')

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = get_data_from_sheet()

if not df.empty:
    st.sidebar.header("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis_type = st.sidebar.selectbox(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:",
        ("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°", "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤", "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£")
    )

    # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    st.sidebar.subheader("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    selected_country = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏® (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)')
    selected_hs_code = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)')
    selected_item = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô)')
    selected_year = st.sidebar.text_input('‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏õ‡∏µ ‡∏û.‡∏®. (‡πÄ‡∏ä‡πà‡∏ô 2564)')

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏∏
    filtered_df = df.copy()

    if selected_country:
        filtered_df = filtered_df[filtered_df['‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®'].astype(str).str.contains(selected_country.strip(), case=False, na=False)]
    if selected_hs_code:
        filtered_df = filtered_df[filtered_df['‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£'].astype(str).str.contains(selected_hs_code.strip(), case=False, na=False)]
    if selected_item:
        filtered_df = filtered_df[filtered_df['‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'].astype(str).str.contains(selected_item.strip(), case=False, na=False)]
    if selected_year:
        filtered_df = filtered_df[filtered_df['‡∏õ‡∏µ ‡∏û.‡∏®.'].astype(str).str.contains(selected_year.strip(), case=False, na=False)]

    st.subheader(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ({len(filtered_df)} ‡πÅ‡∏ñ‡∏ß)")
    st.dataframe(filtered_df, use_container_width=True)

    # --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ---
    st.header(analysis_type)

    if filtered_df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà.")
    else:
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å (Bar/Line Chart)
        def create_trade_chart(df_data, group_col, title):
            summary_df = df_data.groupby(group_col)[['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å']].sum().reset_index()
            fig = go.Figure(data=[
                go.Bar(name='‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', x=summary_df[group_col], y=summary_df['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤']),
                go.Bar(name='‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', x=summary_df[group_col], y=summary_df['‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'])
            ])
            fig.update_layout(barmode='group', title_text=title)
            return fig

        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü Top N (Bar Chart)
        def create_top_n_chart(df_data, col_name, value_col, title, top_n=10):
            if col_name not in df_data.columns:
                st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{col_name}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")
                return go.Figure()
            summary = df_data.groupby(col_name)[value_col].sum().nlargest(top_n).reset_index()
            fig = px.bar(summary, x=col_name, y=value_col, title=title)
            fig.update_xaxes(title_text=col_name)
            fig.update_yaxes(title_text=value_col)
            return fig
            
        # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ (Column Chart)
        def create_balance_chart(df_data, group_col, title, top_n=10):
            if group_col not in df_data.columns:
                st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '{group_col}' ‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•.")
                return go.Figure()
            summary_df = df_data.groupby(group_col)[['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å']].sum().reset_index()
            summary_df['‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤'] = summary_df['‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'] - summary_df['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤']
            
            # Sort by absolute balance to show top imbalances (both surplus and deficit)
            summary_df_sorted = summary_df.loc[summary_df['‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤'].abs().nlargest(top_n).index]

            fig = px.bar(summary_df_sorted, x=group_col, y='‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', title=title,
                         color='‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤', color_continuous_scale=px.colors.sequential.RdBu)
            fig.update_xaxes(title_text=group_col)
            fig.update_yaxes(title_text='‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤')
            return fig


        if analysis_type == "‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°":
            st.subheader("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)

            # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤-‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
            if '‡∏õ‡∏µ ‡∏û.‡∏®.' in filtered_df.columns:
                yearly_summary = filtered_df.groupby('‡∏õ‡∏µ ‡∏û.‡∏®.')[['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å']].sum().reset_index().sort_values(by='‡∏õ‡∏µ ‡∏û.‡∏®.')
                fig = px.line(yearly_summary, x='‡∏õ‡∏µ ‡∏û.‡∏®.', y=['‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å'], title='‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤-‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏õ‡∏µ')
                fig.update_xaxes(type='category') # ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡∏ô X ‡πÄ‡∏õ‡πá‡∏ô Category ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ ‡∏û.‡∏®.
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå '‡∏õ‡∏µ ‡∏û.‡∏®.' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏£‡∏≤‡∏¢‡∏õ‡∏µ.")


        elif analysis_type == "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤":
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)
            
            st.plotly_chart(create_balance_chart(filtered_df, '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', '‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'), use_container_width=True)

        elif analysis_type == "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤":
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)
            
            st.plotly_chart(create_balance_chart(filtered_df, '‡∏ä‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®', '‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏Ñ‡∏π‡πà‡∏Ñ‡πâ‡∏≤'), use_container_width=True)

        elif analysis_type == "‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£":
            st.subheader("‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£")
            
            col1, col2 = st.columns(2)
            with col1:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£', '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£ (‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤)'), use_container_width=True)
            with col2:
                st.plotly_chart(create_top_n_chart(filtered_df, '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£', '‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å', '10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£ (‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å)'), use_container_width=True)
            
            st.plotly_chart(create_balance_chart(filtered_df, '‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£', '‡∏î‡∏∏‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤ 10 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏®‡∏∏‡∏•‡∏Å‡∏≤‡∏Å‡∏£'), use_container_width=True)

else:
    st.info("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Service Account ‡πÅ‡∏•‡∏∞ Google Sheet ID/Sheet Name.")
